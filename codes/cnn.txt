import tensorflow as tf
import pandas as pd
import numpy as np
from PIL import Image

from tensorflow.keras import layers, models
import matplotlib.pyplot as plt

if __name__ == '__main__':
    train_data_frame = pd.read_excel('train.xlsx', sheet_name='Sheet1')
    test_data_frame = pd.read_excel('test.xlsx', sheet_name='Sheet1')
    label_frame = pd.read_excel('label.xlsx', sheet_name='Sheet1')
    arr = np.array(train_data_frame)
    test_arr = np.array(test_data_frame)
    tmp = np.array(label_frame)
    labels = []
    for t in tmp:
        labels.append(t[0])
    labels = np.array(labels)
    # pics = np.empty([3195, 480, 640, 3])
    train_img = []
    test_img = []
    for a in arr:
        image = Image.open(a[0]) # 用PIL中的Image.open打开图像
        image = image.resize((32, 32))
        image_arr = np.array(image)
        train_img.append(image_arr)
    train_img = np.array(train_img)
    train_arr = np.ndarray((train_img.shape[0], *train_img[0].shape))
    for t in test_arr:
        image = Image.open(t[0])  # 用PIL中的Image.open打开图像
        image = image.resize((32, 32))
        image_arr = np.array(image)
        test_img.append(image_arr)
    test_img = np.array(test_img)
    test_arr = np.ndarray((test_img.shape[0], *test_img[0].shape))
    print("test[0] shape" + str(test_img[0].shape))
    print("train[0] shape" + str(train_img[0].shape))
    for i in range(train_img.shape[0]):
        for j in range(train_img[0].shape[0]):
            for k in range(train_img[0].shape[1]):
                for l in range(train_img[0].shape[2]):
                    train_arr[i, j, k, l] = train_img[i][j, k, l]
    for i in range(test_img.shape[0]):
        for j in range(test_img[0].shape[0]):
            for k in range(test_img[0].shape[1]):
                for l in range(test_img[0].shape[2]):
                    test_arr[i, j, k, l] = test_img[i][j, k, l]
    print("train[0] type" + str(type(train_img[0])))
    print("test shape" + str(test_img.shape))
    train_label = labels[:103]
    test_label = labels[103:]
    model = models.Sequential()
    model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.MaxPooling2D((2, 2)))
    model.add(layers.Conv2D(64, (3, 3), activation='relu'))
    model.add(layers.Flatten())
    model.add(layers.Dense(64, activation='relu'))
    model.add(layers.Dense(10))
    model.compile(optimizer='adam',
                  loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
                  metrics=['accuracy'])

    history = model.fit(train_arr, train_label, epochs=10,
                        validation_data=(test_arr, test_label))
    predictios = model.predict_classes(test_img)
    print("predictions:")
    print(predictios)
    plt.plot(history.history['acc'], label='accuracy')
    plt.plot(history.history['val_acc'], label='val_accuracy')
    plt.xlabel('Epoch')
    plt.ylabel('Accuracy')
    plt.ylim([0.5, 1])
    plt.legend(loc='lower right')
    plt.show()

    test_loss, test_acc = model.evaluate(test_arr, test_label, verbose=2)
    print(test_loss)
    print(test_acc)